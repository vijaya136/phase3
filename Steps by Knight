class Solution:

	#Function to find out minimum steps Knight needs to reach target position.
	def minStepToReachTarget(self, KnightPos, TargetPos, N):
		#Code here
		q=[[KnightPos[0],KnightPos[1],0]]
		directions=[[-2,1],[2,1],[-2,-1],[2,-1],[1,-2],[-1,2],[1,2],[-1,-2]]
		visited=set()
		visited.add((KnightPos[0],KnightPos[1]))
		while q:
		    curr=q.pop(0)
		    row,col,steps=curr[0],curr[1],curr[2]
		    if row==TargetPos[0] and col==TargetPos[1]:
		        return steps
		    for i in directions:
		        nr=row+i[0]
		        nc=col+i[1]
		        if nr>0 and nc>0 and nr<=N and nc<=N and (nr,nc) not in visited:
		            visited.add((nr,nc))
		            q.append([nr,nc,steps+1])
        return -1		        
